generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ---------- Core app models ----------
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())

  // NextAuth back-relations
  accounts Account[]
  sessions Session[]

  // Your app relations
  datasets   Dataset[]
  dashboards Dashboard[]
}

model Dataset {
  id         String   @id @default(cuid())
  name       String
  schemaJson Json
  rowCount   Int
  createdAt  DateTime @default(now())
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  charts     Chart[]
  sampleRowsJson Json?
}

model Chart {
  id         String          @id @default(cuid())
  name       String
  type       String
  configJson Json
  createdAt  DateTime        @default(now())
  dataset    Dataset         @relation(fields: [datasetId], references: [id])
  datasetId  String
  dashboards DashboardItem[]
}

model Dashboard {
  id        String          @id @default(cuid())
  name      String
  isPublic  Boolean         @default(false)
  createdAt DateTime        @default(now())
  owner     User            @relation(fields: [ownerId], references: [id])
  ownerId   String
  items     DashboardItem[]
}

model DashboardItem {
  id          String    @id @default(cuid())
  layoutJson  Json
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId String
  chart       Chart     @relation(fields: [chartId], references: [id])
  chartId     String
}

/**
 * ---------- NextAuth models ----------
 */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
